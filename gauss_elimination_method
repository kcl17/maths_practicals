import numpy as np

# Define the coefficient matrix A and the constant vector b
A = np.array([[1, 2, 3],
              [2, -1, 1],
              [3, -1, 4]])

b = np.array([7, 2, 10])

# Augment A with b to form the augmented matrix
augmented = np.column_stack((A, b))

# Perform Gaussian elimination
n_rows, n_cols = augmented.shape
for i in range(min(n_rows, n_cols)):
    # Find the row with the largest absolute value in the current column
    max_row = np.argmax(np.abs(augmented[i:, i])) + i
    # Swap the current row with the row containing the largest absolute value
    augmented[[i, max_row]] = augmented[[max_row, i]]
    # Divide the current row by the first non-zero element
    if augmented[i, i] != 0:
        augmented[i] /= augmented[i, i]
    # Subtract multiples of the current row from the rows below
    for j in range(i + 1, n_rows):
        augmented[j] -= augmented[i] * augmented[j, i]

# Back-substitute to solve for x
x = np.zeros(n_cols - 1)
for i in range(n_rows - 1, -1, -1):
    x[i] = augmented[i, -1]
    for j in range(i + 1, n_cols - 1):
        x[i] -= augmented[i, j] * x[j]

# Print the solution vector x
print("Solution vector x:")
print(x)
